from contextlib import suppress

from aiogram import F, Router
from aiogram.filters import CommandStart, Command, ChatMemberUpdatedFilter, IS_MEMBER, IS_NOT_MEMBER, ADMINISTRATOR
from aiogram.types import Message, CallbackQuery, ChatMemberUpdated
from aiogram.exceptions import TelegramBadRequest
from aiogram.fsm.context import FSMContext
import asyncio
from datetime import datetime

import fsm
from datetime import datetime, timedelta
import keyboards as kb
from db_connect import Database
from user import User
from fsm import NewChannelState, NewLotState, ParticipationButtonTitleState, RequiredChannelState, WinnersCountState, LotDateState,LotEndDateState, LotEndCountState

ROUTER = Router()
ROUTER.my_chat_member.filter(F.chat.type.in_({"group", "supergroup", "channel"}))
DB = Database("sqlite:///new_db.db")
ID = 0
LOTS = {}

def get_add_channel_instruction(name):
    return f'''
        –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è

        –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ (@{name}) –≤ –≤–∞—à –∫–∞–Ω–∞–ª –∏–ª–∏ —á–∞—Ç –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å –ø—Ä–∞–≤–æ–º –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π. –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –∫–∞–Ω–∞–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ @channelname. –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–∞–Ω–∞–ª –ø–µ—Ä–µ—à–ª–∏—Ç–µ –∏–∑ –Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏–ª–∏ —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ –∏ –ø—Ä–∏—à–ª–∏—Ç–µ –±–æ—Ç—É —Å—Å—ã–ª–∫—É –Ω–∞ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞.

        ‚ö†Ô∏è –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø–µ (—á–∞—Ç–µ), –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤—ã–¥–∞–π—Ç–µ –µ–º—É –ø—Ä–∞–≤–æ –ø–∏—Å–∞—Ç—å –≤ –Ω–µ–π.
        '''

def get_make_lot_instruction(name):
    return f'''
    –°–æ–∑–¥–∞–Ω–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞

    ‚úâÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞. –í—ã –º–æ–∂–µ—Ç–µ —Ç–∞–∫–∂–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–º–µ—Å—Ç–µ —Å —Ç–µ–∫—Å—Ç–æ–º –∫–∞—Ä—Ç–∏–Ω–∫—É, –≤–∏–¥–µ–æ –∏–ª–∏ GIF, –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ä–∞–∑–º–µ—Ç–∫–æ–π.
    ‚ùóÔ∏è –í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ 1 –º–µ–¥–∏–∞—Ñ–∞–π–ª

    –ë–æ—Ç –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –∫–æ–Ω–∫—É—Ä—Å–æ–≤ –ø–æ–ª–Ω–æ—Å—Ç—å—é –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π, –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π –∏ –±–µ–∑ —Ä–µ–∫–ª–∞–º—ã, –µ–º—É –±—É–¥–µ—Ç –ø—Ä–∏—è—Ç–Ω–æ, –µ—Å–ª–∏ –≤ –∫–æ–Ω–∫—É—Ä—Å–Ω–æ–º –ø–æ—Å—Ç–µ –í—ã —É–∫–∞–∂–∏—Ç–µ –Ω–∞ –Ω–µ–≥–æ —Å—Å—ã–ª–∫—É, —Å–ø–∞—Å–∏–±–æ. @{name}
    '''

def get_make_lot_requirement_instruction(name):
    return f'''
    üìä –î–æ–±–∞–≤—å—Ç–µ –∫–∞–Ω–∞–ª—ã, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –¥–ª—è —É—á–∞—Å—Ç–∏—è –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ.
    –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª, –≤ –∫–æ—Ç–æ—Ä–æ–º –ø—Ä–æ–≤–æ–¥–∏—Ç—Å—è —Ä–æ–∑—ã–≥—Ä—ã—à, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞ –∏ –≤–∫–ª—é—á–µ–Ω–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.

    –ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª, –Ω—É–∂–Ω–æ:
    1. –î–æ–±–∞–≤–∏—Ç—å –±–æ—Ç–∞ (@{name}) –≤ –≤–∞—à –∫–∞–Ω–∞–ª –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (—ç—Ç–æ –Ω—É–∂–Ω–æ, —á—Ç–æ–±—ã –±–æ—Ç –º–æ–≥ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ –∫–∞–Ω–∞–ª).
    2. –û—Ç–ø—Ä–∞–≤–∏—Ç—å –±–æ—Ç—É –∫–∞–Ω–∞–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ @channelname (–∏–ª–∏ –ø–µ—Ä–µ—Å–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞).

    ‚ö†Ô∏è –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —á—Ç–æ–±—ã —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ –º–æ–∂–Ω–æ –±—ã–ª–æ –±–µ–∑ –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–∞ –∫–∞–Ω–∞–ª, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:
    '''

def get_add_new_required_channel_answer():
    return '''
    ‚úÖ –ö–∞–Ω–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω, –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –æ–¥–∏–Ω (–ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –ø—Ä–∏—Å—ã–ª–∞—Ç—å –∫–∞–Ω–∞–ª—ã) –∏–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞:

    –ù–µ –∑–∞–±–∏—Ä–∞–π—Ç–µ —É –±–æ—Ç–∞ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∫–∞–Ω–∞–ª–∞, –∏–Ω–∞—á–µ –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å –Ω–µ –±—É–¥–µ—Ç!
    '''


async def success_add_channel_reaction(id):
    text = """
    ‚úÖ –ö–∞–Ω–∞–ª –ö–∞–Ω–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω, –º–æ–∂–Ω–æ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –∫ —Å–æ–∑–¥–∞–Ω–∏—é —Ä–æ–∑—ã–≥—Ä—ã—à–∞!

    –ß—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ä–æ–∑—ã–≥—Ä—ã—à, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /new_lot
    """
    await ROUTER.bot.send_message(
            chat_id=id,
            text=text)
    

async def get_channel_inf(username: str):
    try:
        chat = await ROUTER.bot.get_chat(username)
        return chat
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")
        return None
    

async def is_bot_admin(channel_id: int):
    try:
        chat_member = await ROUTER.bot.get_chat_member(chat_id=channel_id, user_id=(await ROUTER.bot.get_me()).id)
        return chat_member.status == "administrator"
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")
        return False
    
def extract_media_and_text(message: Message):
    result = {}
    if message.photo:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º file_id –ø–æ—Å–ª–µ–¥–Ω–µ–π (—Å–∞–º–æ–π –±–æ–ª—å—à–æ–π) –∫–∞—Ä—Ç–∏–Ω–∫–∏
        result["file"] = message.photo[-1].file_id
    elif message.animation:
        result["file"] = message.animation.file_id
    if message.text:
        result["text"] = message.text
    elif message.caption:
        result["text"] = message.caption
    return result

    

async def make_new_lot(message, state):
    if len(DB.get_user_channels(message.from_user.id)) == 0:
        await message.answer('‚ùå –£ –≤–∞—Å –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –Ω–∏ –æ–¥–∏–Ω –∫–∞–Ω–∞–ª, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª –≤ –±–æ—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ú–æ–∏ –∫–∞–Ω–∞–ª—ã üì¢"')
        return
    
    await message.answer(text=get_make_lot_instruction((await ROUTER.bot.get_me()).username), reply_markup = kb.cancel)
    await state.set_state(NewLotState.new_lot)
    DB.set_user_chat_state(message.from_user.id, "new_lot")


async def write_participation_button_title(id, title, state):
    LOTS[id]["participation"] = title
    await ROUTER.bot.send_message(
            chat_id=id,
            text="‚úÖ –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω")
    
    await ROUTER.bot.send_message(
            chat_id=id,
            text=get_make_lot_requirement_instruction((await ROUTER.bot.get_me()).username),
            reply_markup=kb.lot_without_requirements)
    
    await state.set_state(RequiredChannelState.required_channel)
    DB.set_user_chat_state(id, "required_channel")


async def choose_lot_date(id, date):
    LOTS[id]["date"] = date
    await ROUTER.bot.send_message(
        chat_id=id,
        text="‚úÖ –í—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤—ã–±—Ä–∞–Ω–æ")
        
    await ROUTER.bot.send_message(
        chat_id=id,
        text="üóì –ö–∞–∫ –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à?",
        reply_markup= kb.ways_to_end_lot)

async def choose_lot_end_conditions(id, date_or_count, isDate):
    if isDate:
        LOTS[id]["end_date"] = date_or_count
        await ROUTER.bot.send_message(
            chat_id=id,
            text="‚úÖ –í—Ä–µ–º—è –¥–ª—è –ø–æ–¥–≤–µ–¥–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ")
    else:
        LOTS[id]["end_count"] = date_or_count
        await ROUTER.bot.send_message(
            chat_id=id,
            text=f"‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –ø–æ–¥–≤–µ–¥–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {date_or_count}")
        
    if "file" in LOTS[id]:
        await ROUTER.bot.send_photo(id, photo=LOTS[id]["file"], caption=LOTS[id]["text"], reply_markup=await kb.lot_kb(LOTS[id]["participation"], id, False))
    else:
        await ROUTER.bot.send_message(
            chat_id=id,
            text=LOTS[id]["text"],
            reply_markup = await kb.lot_kb(LOTS[id]["participation"], id, False))
        
    await ROUTER.bot.send_message(
            chat_id=id,
            text=make_checkout_lot_text(id, isDate),
            reply_markup = await kb.final_lot_checkout(id))
    

async def send_lot_to_channel(id):
    await ROUTER.bot.send_message(
        chat_id=LOTS[id]["channel_id"],
        text=LOTS[id]["text"],
        reply_markup = await kb.lot_kb(LOTS[id]["participation"], id, True))
    


def make_checkout_lot_text(id, isDate):
    if isDate:
        return  f'''
        üßÆ –í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–æ–∑—ã–≥—Ä—ã—à

        –†–æ–∑—ã–≥—Ä—ã—à –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è {LOTS[id]["end_date"]}
        –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π: {LOTS[id]["winners_count"]}
        '''
    else:
        return f'''
        üßÆ –í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–æ–∑—ã–≥—Ä—ã—à

        –†–æ–∑—ã–≥—Ä—ã—à –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è, –∫–æ–≥–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å—Ç–∞–Ω–µ—Ç —Ä–∞–≤–Ω–æ {LOTS[id]["end_count"]}
        –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π: {LOTS[id]["winners_count"]}
        '''
    
        
def make_time_examples():

    now = datetime.now()
    ten_m = now + timedelta(minutes=10) - timedelta(hours=2)
    one_h = now + timedelta(hours=1) - timedelta(hours=2)
    one_d = now + timedelta(days=1) - timedelta(hours=2)
    one_w = now + timedelta(weeks=1) - timedelta(hours=2)

    return f'''
    {ten_m.strftime("%d.%m.%y %H:%M")} - —á–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç
    {one_h.strftime("%d.%m.%y %H:%M")} - —á–µ—Ä–µ–∑ —á–∞—Å
    {one_d.strftime("%d.%m.%y %H:%M")} - —á–µ—Ä–µ–∑ –¥–µ–Ω—å
    {one_w.strftime("%d.%m.%y %H:%M")} - —á–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é
    '''


def isDateCorrect(date):
    try:
        input_date = datetime.strptime(date, '%d.%m.%y %H:%M')
        if input_date > datetime.now() - timedelta(hours=2):
            return True
        else:
            return False
    except ValueError:
        return False

#----–†–µ–∞–∫—Ü–∏–∏ –Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è-----------------------------------------------------
@ROUTER.message(NewChannelState.new_channel)
async def add_channel_by_username(message: Message, state: FSMContext):
    channels_id = [c[1] for c in DB.get_user_channels(message.from_user.id)]
    chat = await get_channel_inf(message.text)
    if chat is None:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–∞—à–∏ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ –∫–∞–Ω–∞–ª–µ!")
        await state.clear()
        DB.set_user_chat_state(message.from_user.id, "")
        return 
    
    current_channel_id = chat.id
    current_channel_name = chat.title
    if (await is_bot_admin(current_channel_id)):
        if current_channel_id not in channels_id:
            DB.add_channel(message.from_user.id, current_channel_name, current_channel_id)
            await success_add_channel_reaction(message.from_user.id)
    else:
        await message.answer("‚ùå –ë–æ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —ç—Ç–æ–≥–æ –∫–∞–Ω–∞–ª–∞")
    await state.clear()
    DB.set_user_chat_state(message.from_user.id, "")


@ROUTER.message(NewLotState.new_lot)
async def write_lot_content(message: Message, state: FSMContext):
    media = extract_media_and_text(message)
    LOTS[message.from_user.id] = {}
    LOTS[message.from_user.id]["text"] = media["text"]
    if "file" in media:
        LOTS[message.from_user.id]["file"] = media["file"]
        await message.answer("‚úÖ –§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ")
    await state.clear()
    DB.set_user_chat_state(message.from_user.id, "")
    await message.answer("‚úÖ –¢–µ–∫—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω")
    await message.answer(
        text="üì∞ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –Ω–∞ –∫–Ω–æ–ø–∫–µ, –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∫–Ω–æ–ø–∫–æ–π:",
        reply_markup=await kb.participation_button_title())
    await state.set_state(ParticipationButtonTitleState.participation_button_title)
    DB.set_user_chat_state(message.from_user.id, "participation_button_title")


@ROUTER.message(ParticipationButtonTitleState.participation_button_title)
async def get_custom_participation_button_title(message: Message, state: FSMContext):
    await state.clear()
    DB.set_user_chat_state(message.from_user.id, "")
    await write_participation_button_title(message.from_user.id, message.text, state)

@ROUTER.message(RequiredChannelState.required_channel)
async def get_required_channel_username(message: Message, state: FSMContext):
    r_channel = await get_channel_inf(message.text)
    id = message.from_user.id
    if "requirements" not in LOTS[id]:
        LOTS[id]["requirements"] = set()
    else:
        LOTS[id]["requirements"].add([r_channel.title, r_channel.id])

    await message.answer(text=get_add_new_required_channel_answer(),
                         reply_markup=kb.enough_requirements)
    

@ROUTER.message(WinnersCountState.winners_count)
async def get_winners_count(message: Message, state: FSMContext):
    await state.clear()
    DB.set_user_chat_state(message.from_user.id, "")

    winners_count = int(message.text)
    LOTS[message.from_user.id]["winners_count"] = winners_count

    await ROUTER.bot.send_message(
            chat_id=message.from_user.id,
            text=f"‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {winners_count}")
    
    channels = DB.get_user_channels(message.from_user.id)
    await ROUTER.bot.send_message(
            chat_id=message.from_user.id,
            text=f"üóì –í –∫–∞–∫–æ–º –∫–∞–Ω–∞–ª–µ –ø—É–±–ª–∏–∫—É–µ–º —Ä–æ–∑—ã–≥—Ä—ã—à?",
            reply_markup= await kb.choose_channel_to_lot(channels))

@ROUTER.message(LotDateState.lot_date)
async def get_lot_date(message: Message, state: FSMContext):
    if not isDateCorrect(message.text):
        await ROUTER.bot.send_message(
            chat_id=message.from_user.id,
            text="‚ùå –î–∞—Ç–∞ –ø—É–±–ª–∏—Ü–∞—Ü–∏–∏: –ù–µ–≤–µ—Ä–Ω–æ —É–∫–∞–∑–∞–Ω–∞ –¥–∞—Ç–∞!\n–§–æ—Ä–º–∞—Ç: –¥–¥.–º–º.–≥–≥ —á—á:–º–º")
    else:
        await state.clear()
        DB.set_user_chat_state(message.from_user.id, "")

        await choose_lot_date(message.from_user.id, message.text)


@ROUTER.message(LotEndDateState.lot_end_date)
async def get_lot_end_date(message: Message, state: FSMContext):
    if not isDateCorrect(message.text):
        await ROUTER.bot.send_message(
            chat_id=message.from_user.id,
            text="‚ùå –î–∞—Ç–∞ –ø–æ–¥–≤–µ–¥–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: –ù–µ–≤–µ—Ä–Ω–æ —É–∫–∞–∑–∞–Ω–∞ –¥–∞—Ç–∞!\n–§–æ—Ä–º–∞—Ç: –¥–¥.–º–º.–≥–≥ —á—á:–º–º")
    else:
        await state.clear()
        DB.set_user_chat_state(message.from_user.id, "")

        await choose_lot_end_conditions(message.from_user.id, message.text, True)


@ROUTER.message(LotEndCountState.lot_end_count)
async def get_lot_end_count(message: Message, state: FSMContext):
        await state.clear()
        DB.set_user_chat_state(message.from_user.id, "")
        await choose_lot_end_conditions(message.from_user.id, message.text, False)
    
#------—Åommands--------------------------------------------
@ROUTER.message(CommandStart())
async def cmd_start(message: Message):
    if not DB.user_exists(message.from_user.id):
        DB.add_user(message.from_user.id)
    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º!\n–ù–∞—à –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –í–∞–º –ø—Ä–æ–≤–µ—Å—Ç–∏ —Ä–æ–∑—ã–≥—Ä—ã—à –Ω–∞ –∫–∞–Ω–∞–ª–µ.\n–ì–æ—Ç–æ–≤—ã —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ä–æ–∑—ã–≥—Ä—ã—à?", reply_markup=await kb.start_menu())

@ROUTER.message(Command("new_lot"))
async def make_new_lot_command(message: Message, state: FSMContext):
    await make_new_lot(message, state)

#------Start_Menu Commands-----------------------------------------------
@ROUTER.message(lambda message: message.text is not None and "–°–æ–∑–¥–∞—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à" in message.text)
async def make_new_lot_button(message: Message, state: FSMContext):
    await make_new_lot(message, state)


@ROUTER.message(lambda message: message.text is not None and "–ú–æ–∏ –∫–∞–Ω–∞–ª—ã" in message.text)
async def show_channels(message: Message):
    channels = DB.get_user_channels(message.from_user.id)
    await message.answer(text="‚ÑπÔ∏è –î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –≤–∞–º–∏ –∫–∞–Ω–∞–ª—ã:", reply_markup=await kb.channels_list(channels))

@ROUTER.message(lambda message: message.text is not None and "/delete_channel" in message.text)
async def delete_channel(message: Message):
    channel_id = int(message.text.split()[-1])
    channels = [c[1] for c in DB.get_user_channels(message.from_user.id)]


    if channel_id in channels:
        DB.delete_channel_by_id(channel_id)
        await message.answer("‚úÖ –ö–∞–Ω–∞–ª —É–¥–∞–ª–µ–Ω –∏–∑ –±–æ—Ç–∞")
    else:
        await message.answer("‚ùå –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —ç—Ç–æ–≥–æ –∫–∞–Ω–∞–ª–∞")
#---Callbacks----------------------------------------------------------------
@ROUTER.callback_query(F.data == "add_channel")
async def send_adding_channel_instruction(callback: CallbackQuery, state: FSMContext):
    global ID
    await state.set_state(NewChannelState.new_channel)
    DB.set_user_chat_state(callback.from_user.id, "new_channel")
    ID = callback.from_user.id
    callback.answer("")
    await ROUTER.bot.send_message(
            chat_id=callback.from_user.id,
            text=get_add_channel_instruction((await ROUTER.bot.get_me()).username),
            reply_markup = kb.cancel
        )
    
@ROUTER.callback_query(lambda F: "delete_channel" in F.data)
async def send_delete_channel_confirmation(callback: CallbackQuery):
    channel_id = int(callback.data.split("_")[-1])
    await ROUTER.bot.send_message(
            chat_id=callback.from_user.id,
            text=f"‚ö†Ô∏è –ß—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª –∏–∑ –±–æ—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n/delete_channel {channel_id}")
    

@ROUTER.callback_query(F.data.split("_")[0] == "channel")
async def send_channel_menu(callback: CallbackQuery):
    channel_id = int(callback.data.split("_")[1])
    await ROUTER.bot.send_message(
            chat_id=callback.from_user.id,
            text="üì¢ –ú–µ–Ω—é –∫–∞–Ω–∞–ª–∞:",
            reply_markup = await kb.channel_menu(channel_id))
    


@ROUTER.callback_query(F.data.split("_")[0] == "participationTitle")
async def get_standart_participation_button_title(callback: CallbackQuery, state: FSMContext):
    title = callback.data.split("_")[1]
    await write_participation_button_title(callback.from_user.id, title, state)



@ROUTER.callback_query(F.data == "end_requirements")
async def end_lot_requirements(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    DB.set_user_chat_state(callback.from_user.id, "")

    await ROUTER.bot.send_message(
        chat_id=callback.from_user.id,
        text=f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ")
    
    await ROUTER.bot.send_message(
        chat_id=callback.from_user.id,
        text=f"üßÆ –°–∫–æ–ª—å–∫–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π –≤—ã–±—Ä–∞—Ç—å –±–æ—Ç—É?")
    
    await state.set_state(WinnersCountState.winners_count)
    DB.set_user_chat_state(callback.from_user.id, "winners_count")


@ROUTER.callback_query(F.data.split("_")[0] == "chooseLotsChannel")
async def choose_lot_channel(callback: CallbackQuery):
    channel_id = int(callback.data.split("_")[1])

    LOTS[callback.from_user.id]["channel_id"] = channel_id

    await ROUTER.bot.send_message(
            chat_id=callback.from_user.id,
            text="‚úÖ –ö–∞–Ω–∞–ª –≤—ã–±—Ä–∞–Ω")
    await ROUTER.bot.send_message(
            chat_id=callback.from_user.id,
            text="‚è∞ –ö–æ–≥–¥–∞ –Ω—É–∂–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à?",
            reply_markup= kb.choose_lot_time)
    

@ROUTER.callback_query(F.data.split("_")[0] == "lotTime")
async def choose_lot_time_by_btns(callback: CallbackQuery, state: FSMContext):
    time_type = callback.data.split("_")[1]

    if time_type == "now":
        await choose_lot_date(callback.from_user.id, (datetime.now() - timedelta(hours=2)).strftime("%d.%m.%y %H:%M") )
    else:    
        await ROUTER.bot.send_message(
            chat_id=callback.from_user.id,
            text="‚è∞ –ö–æ–≥–¥–∞ –Ω—É–∂–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à? (–£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–¥.–º–º.–≥–≥ —á—á:–º–º)\n–ë–æ—Ç –∂–∏–≤–µ—Ç –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (GMT+3) –ú–æ—Å–∫–≤–∞, –†–æ—Å—Å–∏—è")
        await ROUTER.bot.send_message(
            chat_id=callback.from_user.id,
            text=f"–ü—Ä–∏–º–µ—Ä—ã:\n\n{make_time_examples()}")
        
        await state.set_state(LotDateState.lot_date)
        DB.set_user_chat_state(callback.from_user.id, "lot_date")


@ROUTER.callback_query(F.data.split("_")[0] == "wayToEnd")
async def choose_lot_time_by_btns(callback: CallbackQuery, state: FSMContext):
    way = callback.data.split("_")[1]

    if way == "time":
        await ROUTER.bot.send_message(
            chat_id=callback.from_user.id,
            text="üèÅ –ö–æ–≥–¥–∞ –Ω—É–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–±–µ–¥–∏—Ç–µ–ª—è? (–£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–¥.–º–º.–≥–≥ —á—á:–º–º)\n–ë–æ—Ç –∂–∏–≤–µ—Ç –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (GMT+3) –ú–æ—Å–∫–≤–∞, –†–æ—Å—Å–∏—è")
        await ROUTER.bot.send_message(
            chat_id=callback.from_user.id,
            text=f"–ü—Ä–∏–º–µ—Ä—ã:\n\n{make_time_examples()}")
        
        await state.set_state(LotEndDateState.lot_end_date)
        DB.set_user_chat_state(callback.from_user.id, "lot_end_date")
    else:
        await ROUTER.bot.send_message(
            chat_id=callback.from_user.id,
            text='''
            üèÅ –£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞:

            ‚ùóÔ∏è –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, —É—á–∞—Å—Ç–Ω–∏–∫ - —Ç–æ—Ç, –∫—Ç–æ –ø–æ—É—á–∞—Å—Ç–≤–æ–≤–∞–ª –≤ –∫–æ–Ω–∫—É—Ä—Å–µ, –≤—ã–±–æ—Ä –±—É–¥–µ—Ç –Ω–µ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –∫–∞–Ω–∞–ª–∞, –∞ –∏–º–µ–Ω–Ω–æ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (–∫—Ç–æ –Ω–∞–∂–∞–ª –Ω–∞ –∫–Ω–æ–ø–∫—É –≤ –∫–æ–Ω–∫—É—Ä—Å–µ)")
            ''')
        await state.set_state(LotEndCountState.lot_end_count)
        DB.set_user_chat_state(callback.from_user.id, "lot_end_coun")


@ROUTER.callback_query(F.data.split("_")[0] == "saveLot")
async def save_lot(callback: CallbackQuery, state: FSMContext):
    print("yes")
    print(LOTS[callback.from_user.id]["date"])
    date = datetime.strptime(LOTS[callback.from_user.id]["date"], '%d.%m.%y %H:%M') + timedelta(hours=2)
    if date < datetime.now():
        date = datetime.now() + timedelta(seconds=2)
    
    user_id = callback.from_user.id
    lot_id = len(DB.get_lots_by_user_id(user_id))
    if "file" in LOTS[user_id]:
        file = LOTS[user_id]["file"]
    else:
        file = 0

    if "end_count" in LOTS[user_id]:
        end_count = LOTS[user_id]["end_count"]
    else:
        end_count = -1

    if "end_date" in LOTS[user_id]:
        end_date = LOTS[user_id]["end_date"]
    else:
        end_date = ""
    DB.add_lot(lot_id, user_id, LOTS[user_id]["text"], file, LOTS[user_id]["participation"], LOTS[user_id]["winners_count"], LOTS[user_id]["channel_id"], LOTS[user_id]["date"], end_count, end_date)


    ROUTER.scheduler.add_job(send_lot_to_channel, "date", run_date=date,
                          args=[lot_id])
        

#---–û–∂–∏–¥–∞–Ω–∏–µ —Ç–æ–≥–æ, —á—Ç–æ –±–æ—Ç–∞ —Å–¥–µ–ª–∞—é—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º-----------------------------------------------------
@ROUTER.my_chat_member(ChatMemberUpdatedFilter(member_status_changed=IS_NOT_MEMBER >> ADMINISTRATOR))
async def bot_added_as_admin(event: ChatMemberUpdated, state: FSMContext):    
    if DB.get_user_chat_state(ID) == "new_channel":
        await success_add_channel_reaction(ID)
        await state.clear()
        DB.set_user_chat_state(ID, "")
        
        channels_id = [c[1] for c in DB.get_user_channels(ID)]
        if event.chat.id not in channels_id:
            DB.add_channel(ID, event.chat.title, event.chat.id)


    # await event.answer(
    #     text=f"–ü—Ä–∏–≤–µ—Ç! –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –¥–æ–±–∞–≤–∏–ª–∏ –º–µ–Ω—è –≤ "
    #          f'–ö–∞–Ω–∞–ª "{event.chat.title}" '
    #          f"–∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. ID —á–∞—Ç–∞: {event.chat.id}"
    # )


#---–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π---------------------------------------------
@ROUTER.message()
async def process_unknown_command(message: Message):
    await message.answer("–ò–∑–≤–∏–Ω–∏, —è –Ω–µ –∑–Ω–∞—é —Ç–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        
